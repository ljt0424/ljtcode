import{_ as s,o as a,c as l,U as n}from"./chunks/framework.afdf1834.js";const d=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"audition/css/css上篇.md","filePath":"audition/css/css上篇.md","lastUpdated":null}'),o={name:"audition/css/css上篇.md"},e=n(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="_1-常见的水平垂直居中实现方案" tabindex="-1">1. 常见的水平垂直居中实现方案 <a class="header-anchor" href="#_1-常见的水平垂直居中实现方案" aria-label="Permalink to &quot;1. 常见的水平垂直居中实现方案&quot;">​</a></h2><ul><li>最简单的方案当然是flex布局</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">justify-content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">align-items</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">son</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>绝对定位配合margin:auto,的实现方案</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">son</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">right</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>绝对定位配合transform实现 (推荐) 触发合成层优化性能 *</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">father</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> relative</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">son</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> absolute</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">translate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">-50%</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="清除浮动" tabindex="-1">清除浮动 <a class="header-anchor" href="#清除浮动" aria-label="Permalink to &quot;清除浮动&quot;">​</a></h2><p>清除浮动是为了解决浮动元素导致的父元素高度塌陷问题。</p><p>使用额外的空元素清除浮动：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">clear: both;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>使用伪元素清除浮动：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">::</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> table</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> class=&quot;clearfix&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;!-- 浮动元素 --</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/</span><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>使用父元素设置 overflow 属性： 父元素使用 CSS 弹性盒子布局（Flexbox）：display:flex</p><h2 id="_2-bfc问题-触发bfc的元素" tabindex="-1">2. BFC问题，触发BFC的元素 <a class="header-anchor" href="#_2-bfc问题-触发bfc的元素" aria-label="Permalink to &quot;2. BFC问题，触发BFC的元素&quot;">​</a></h2><p>BFC：块级格式化上下文,属于普通流，是一块独立的渲染区域，内部元素不会影响外部的元素。</p><p><strong>如何触发？</strong></p><ul><li>根元素</li><li>float属性不是none</li><li>position为absolute或者fixed</li><li>display为inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow除visible以外的值(hidden、auto、scroll)</li></ul><h2 id="_4-隐藏元素的属性有哪些" tabindex="-1">4. 隐藏元素的属性有哪些 <a class="header-anchor" href="#_4-隐藏元素的属性有哪些" aria-label="Permalink to &quot;4. 隐藏元素的属性有哪些&quot;">​</a></h2><h3 id="_1-常规方法" tabindex="-1">1. 常规方法 <a class="header-anchor" href="#_1-常规方法" aria-label="Permalink to &quot;1. 常规方法&quot;">​</a></h3><ul><li>display: none;（<code>结构消失</code>；会<code>触发回流重绘</code>性能消耗较大；<code>非继承属性</code>，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示）</li><li>visibility: hidden;（<code>结构保留</code>，占据空间；<code>仅触发重绘</code>，不会触发事件（无法选中）性能消耗较少；<code>是继承属性</code>，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式。）</li><li>opacity: 0;（结构保留，占据空间；可以正常触发事件，因合成层触发gpu加速，所以不发生回流，性能消耗较少；<code>非继承属性</code>，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示）</li><li>content-visibility: hidden;（设置元素内容可见性，设置的元素本身不受影响。hidden 隐藏效果与 display: none 类似，但实际浏览器只是跳过了内容的渲染，还保留着内容的渲染状态，性能上有优势。）</li></ul><h3 id="_2-逃逸视窗" tabindex="-1">2. 逃逸视窗 <a class="header-anchor" href="#_2-逃逸视窗" aria-label="Permalink to &quot;2. 逃逸视窗&quot;">​</a></h3><ul><li>position + left/top（利用绝对定位 position 设置 absolute 或 fixed，同时 left 或 top 设置 -9999px；</li><li>超大负边距会将元素抛出视图，因为定位本身脱离了文档流所以不占据空间。）</li><li>translate(-9999px)（利用偏移抛出视图，空间会占据，不过元素实际不在视窗内所以无法交互。此方法对行内元素无效）</li></ul><h3 id="_3-移行变换" tabindex="-1">3. 移行变换 <a class="header-anchor" href="#_3-移行变换" aria-label="Permalink to &quot;3. 移行变换&quot;">​</a></h3><ul><li>scale(0) / skew(90deg)（通过2D变换来达到隐藏，占据空间，不可交互。注意：此方法对行内元素无效！）</li><li>circle(0px)（利用裁剪创建元素的可显示区域，区域外会隐藏，占据空间，不可交互）</li><li>z-index（层叠上下文在合适的情况下可以遮挡住元素，也算是一种隐藏方式。）</li></ul><h2 id="_5-px-和-em-的区别" tabindex="-1">5. px 和 em 的区别 <a class="header-anchor" href="#_5-px-和-em-的区别" aria-label="Permalink to &quot;5. px 和 em 的区别&quot;">​</a></h2><ul><li>px全称pixel像素，是相对于屏幕分辨率而言的，它是一个绝对单位</li><li>em是一个相对长度单位，具体的大小需要相对于父元素计算，比如<code>父元素的字体大小</code>为80px，那么子元素1em就表示大小和父元素一样为80px，0.5em就表示字体大小是父元素的一半为40px,如果自身定义了font-size按自身来计算</li></ul><h2 id="_6-vw、vh-是什么" tabindex="-1">6. vw、vh 是什么？ <a class="header-anchor" href="#_6-vw、vh-是什么" aria-label="Permalink to &quot;6. vw、vh 是什么？&quot;">​</a></h2><p>vw 和 vh 是 CSS3 新单位，即 view width 可视窗口宽度 和 view height 可视窗口高度。1vw 就等于可视窗口宽度的百分之一，1vh 就等于可视窗口高度的百分之一。</p><ul><li>对于<code>position: absolute</code>;的元素是相对于已<code>定位的父元素</code></li><li><code>对于position: fixed;的元素是相对于 ViewPort（可视窗口）</code></li></ul><h2 id="自适应布局rem" tabindex="-1">自适应布局rem <a class="header-anchor" href="#自适应布局rem" aria-label="Permalink to &quot;自适应布局rem&quot;">​</a></h2><p>自适应布局使用rem作为单位，其原理是基于<strong>浏览器默认字体大小</strong>的相对值来计算元素的尺寸，实现不同屏幕尺寸下的自适应布局。</p><p>在HTML的<code>&lt;head&gt;</code>标签中设置基准字体大小，一般为16px。然后在CSS中使用rem作为单位来定义元素的尺寸，例如：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16px</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* 基准字体大小 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10rem</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* 宽度为10倍基准字体大小 */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5rem</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* 高度为5倍基准字体大小 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">在不同屏幕尺寸下，浏览器会自动根据基准字体大小进行缩放，从而实现自适应布局。例如，如果用户在移动设备上浏览网页，浏览器会根据屏幕宽度自动调整基准字体大小，使得网页元素的尺寸相对于屏幕宽度保持一定比例。</span></span></code></pre></div><h2 id="_7-flex-布局如何使用" tabindex="-1">7. flex 布局如何使用 <a class="header-anchor" href="#_7-flex-布局如何使用" aria-label="Permalink to &quot;7. flex 布局如何使用&quot;">​</a></h2><p>flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;。指定容器display: flex即可。 容器有以下属性：flex-direction，flex-wrap，flex-flow，justify-content，align-items，align-content。</p><ul><li>flex-direction属性决定主轴的方向；</li><li>flex-wrap属性定义，如果一条轴线排不下，如何换行；</li><li>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap；</li><li>justify-content属性定义了项目在主轴上的对齐方式。</li><li>align-items属性定义项目在交叉轴上如何对齐。</li><li>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li></ul><h2 id="_3-felx是哪些属性的缩写-对应的属性代表什么含义" tabindex="-1">3. felx是哪些属性的缩写，对应的属性代表什么含义 <a class="header-anchor" href="#_3-felx是哪些属性的缩写-对应的属性代表什么含义" aria-label="Permalink to &quot;3. felx是哪些属性的缩写，对应的属性代表什么含义&quot;">​</a></h2><p>flex在浏览器中查看分别是</p><ul><li>flex-grow（设置了对应元素的增长系数）</li><li>flex-shrink(指定了对应元素的收缩规则，只有在所有元素的默认宽度之和大于容器宽度时才会触发)</li><li>flex-basis（指定了对应元素在主轴上的大小）</li></ul><h3 id="flex-1" tabindex="-1">flex:1 <a class="header-anchor" href="#flex-1" aria-label="Permalink to &quot;flex:1&quot;">​</a></h3><ol><li>flex: 1, 对应的是1 1 0%, 相当于可扩大，可缩小，flex-basis为0%</li><li>不管内容多少，一般都是平分空间，空间大小都一致</li></ol><h3 id="flex-auto" tabindex="-1">flex:auto <a class="header-anchor" href="#flex-auto" aria-label="Permalink to &quot;flex:auto&quot;">​</a></h3><ol><li>flex: auto, 对应的是1 1 auto, 相当于可扩大，可缩小，flex-basis为auto</li><li>flex: auto是根据内容的大小来分，不是均分的（除非内容都是一样，才均分）</li></ol><h3 id="flex-0" tabindex="-1">flex: 0 <a class="header-anchor" href="#flex-0" aria-label="Permalink to &quot;flex: 0&quot;">​</a></h3><ol><li>flex: 0, 对应的是0 1 0%, 相当于不可扩大，可缩小，flex-basis为0%</li><li>不可扩大，可缩小,表现形式为最小内容宽度</li></ol><h3 id="flex-none" tabindex="-1">flex: none <a class="header-anchor" href="#flex-none" aria-label="Permalink to &quot;flex: none&quot;">​</a></h3><ol><li>flex: none, 对应的是0 0 auto, 相当于不可扩大，不可缩小，flex-basis为auto</li><li>不可扩大，不可缩小，内容本身的宽度是多少就是多少</li></ol><h2 id="_8-grid布局" tabindex="-1">8. grid布局 <a class="header-anchor" href="#_8-grid布局" aria-label="Permalink to &quot;8. grid布局&quot;">​</a></h2><p>那就是 flex 布局是一维布局，Grid 布局是二维布局。flex 布局一次只能处理一个维度上的元素布局，一行或者一列。Grid 布局是将容器划分成了“行”和“列”，产生了一个个的网格，我们可以将网格元素放在与这些行和列相关的位置上，从而达到我们布局的目的。</p><ul><li><code>grid-template-columns</code>: repeat(3,200px);</li><li><code>grid-gap</code>: 5px;</li><li><code>grid-template-rows</code>:repeat(2,50px);</li></ul><h2 id="_8-如何用-css-或-js-实现多行文本溢出省略效果-考虑兼容性" tabindex="-1">8. 如何用 css 或 js 实现多行文本溢出省略效果，考虑兼容性 <a class="header-anchor" href="#_8-如何用-css-或-js-实现多行文本溢出省略效果-考虑兼容性" aria-label="Permalink to &quot;8. 如何用 css 或 js 实现多行文本溢出省略效果，考虑兼容性&quot;">​</a></h2><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">overflow: hidden;</span></span>
<span class="line"><span style="color:#FFCB6B;">text-overflow</span><span style="color:#A6ACCD;">:ellipsis;</span></span>
<span class="line"><span style="color:#FFCB6B;">white-space</span><span style="color:#A6ACCD;">: nowrap;</span></span></code></pre></div><h2 id="_9-居中为什么要使用-transform-为什么不使用-marginleft-top" tabindex="-1">9. 居中为什么要使用 transform（为什么不使用 marginLeft/Top） <a class="header-anchor" href="#_9-居中为什么要使用-transform-为什么不使用-marginleft-top" aria-label="Permalink to &quot;9. 居中为什么要使用 transform（为什么不使用 marginLeft/Top）&quot;">​</a></h2><ol><li>transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint）</li><li>top/left属于布局属性，该属性的变化会导致重排（reflow/relayout），所谓重排即指对这些节点以及受这些节点影响的其它节点，进行CSS计算-&gt;布局-&gt;重绘过程，浏览器需要为整个层进行重绘并重新上传到 GPU，造成了极大的性能开销。</li></ol><h2 id="_10-介绍下粘性布局-sticky" tabindex="-1">10. 介绍下粘性布局(sticky) <a class="header-anchor" href="#_10-介绍下粘性布局-sticky" aria-label="Permalink to &quot;10. 介绍下粘性布局(sticky)&quot;">​</a></h2><p>position 中的 sticky 值是 CSS3 新增的，设置了 sticky 值后，在屏幕范围（viewport）时该元素的位置并不受到定位影响（设置是top、left等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成fixed，根据设置的left、top等属性成固定位置的效果。</p><p>sticky 属性值有以下几个特点</p><ol><li>该元素并不脱离文档流，仍然保留元素原本在文档流中的位置。</li><li>当元素在容器中被滚动超过指定的偏移值时，元素在容器内固定在指定位置。亦即如果你设置了top: 50px，那么在sticky元素到达距离相对定位的元素顶部50px的位置时固定，不再向上移动。</li><li>元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量</li></ol><h2 id="_11-说出-space-between-和-space-around-的区别" tabindex="-1">11. 说出 space-between 和 space-around 的区别 <a class="header-anchor" href="#_11-说出-space-between-和-space-around-的区别" aria-label="Permalink to &quot;11. 说出 space-between 和 space-around 的区别&quot;">​</a></h2><p>这个是 flex 布局的内容，其实就是一个边距的区别，按水平布局来说：</p><ul><li>space-between是两端对齐，在左右两侧没有边距，</li><li>而space-around是每个子项目左右方向的 margin 相等，所以两个item中间的间距会比较大。边缘空间是两个item之间空间大小的一半</li><li>space-evenly，边缘空间和两个item之间的空间一样大</li></ul><h2 id="_12-css3-中-transition-和-animation-的属性分别有哪些" tabindex="-1">12. CSS3 中 transition 和 animation 的属性分别有哪些 <a class="header-anchor" href="#_12-css3-中-transition-和-animation-的属性分别有哪些" aria-label="Permalink to &quot;12. CSS3 中 transition 和 animation 的属性分别有哪些&quot;">​</a></h2><p>transition 过渡动画：</p><ul><li>transition-property：指定过渡的 CSS 属性</li><li>transition-duration：指定过渡所需的完成时间</li><li>transition-timing-function：指定过渡函数</li><li>transition-delay：指定过渡的延迟时间</li></ul><p>animation 关键帧动画：</p><ul><li>animation-name：指定要绑定到选择器的关键帧的名称</li><li>animation-duration：动画指定需要多少秒或毫秒完成</li><li>animation-timing-function：设置动画将如何完成一个周期</li><li>animation-delay：设置动画在启动前的延迟间隔</li><li>animation-iteration-count：定义动画的播放次数</li><li>animation-direction：指定是否应该轮流反向播放动画</li><li>animation-fill-mode：规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式</li><li>animation-play-state：指定动画是否正在运行或已暂停</li></ul><h2 id="clip-path" tabindex="-1">clip-path <a class="header-anchor" href="#clip-path" aria-label="Permalink to &quot;clip-path&quot;">​</a></h2><p>clip-path 属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。可以指定一些特定形状。</p><p>裁剪一张图像，以圆形的方式显示 50%：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">img</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">clip-path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">circle</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50%</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="行内元素和块元素" tabindex="-1">行内元素和块元素 <a class="header-anchor" href="#行内元素和块元素" aria-label="Permalink to &quot;行内元素和块元素&quot;">​</a></h2><ul><li>块级元素以块状形式显示，并占据一行或多行的空间，其宽度默认为父元素的100%。块级元素可以设置宽度、高度、外边距和内边距等盒模型属性。可以容纳其他块级元素或行内元素。</li><li>行内元素则不会产生换行，宽度由其内容决定，不可以设置宽度、高度和垂直方向的外边距（上下外边距），只能设置水平方向的外边距和内边距。它们一般用于包裹文本或者嵌套在块级元素中。</li><li>默认样式：块级元素的默认显示方式为&quot;block&quot;，而行内元素的默认显示方式为&quot;inline&quot;。</li></ul><h2 id="text" tabindex="-1">text <a class="header-anchor" href="#text" aria-label="Permalink to &quot;text&quot;">​</a></h2><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* text-aline */</span></span>
<span class="line"><span style="color:#FFCB6B;">h1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">  //居中</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">date</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-align</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">justify</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;"> //两端对齐</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-decoration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">none</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;"> //删除链接的下划线：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 可用于所有字句变成大写或小写字母，或每个单词的首字母大写。 */</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">uppercase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">uppercase</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">lowercase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">lowercase</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">capitalize</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">capitalize</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">  //每个单词的首字母大写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">p</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">text-indent</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50px</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;"> //首行缩进</span></span></code></pre></div><h2 id="对齐" tabindex="-1">对齐 <a class="header-anchor" href="#对齐" aria-label="Permalink to &quot;对齐&quot;">​</a></h2><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">vertical-align</span><span style="color:#A6ACCD;"> 属性设置一个元素的垂直对齐方式。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> space-between  space-around 对齐弹性盒的 &lt;div&gt; 元素的各项：</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-items</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">center</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 居中对齐弹性盒的各项 &lt;div&gt; 元素：</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-self</span><span style="color:#A6ACCD;"> 属性定义flex子项单独在侧轴（纵轴）方向上的对齐方式。注意：</span><span style="color:#B2CCD6;">align-self</span><span style="color:#A6ACCD;"> 属性可重写灵活容器的 </span><span style="color:#B2CCD6;">align-items</span><span style="color:#A6ACCD;"> 属性。</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h2><p>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</p><h2 id="响应式布局rem和em" tabindex="-1">响应式布局rem和em <a class="header-anchor" href="#响应式布局rem和em" aria-label="Permalink to &quot;响应式布局rem和em&quot;">​</a></h2><p>rem相对于根元素（即HTML元素） em相对于父元素</p><h2 id="css选择器排序" tabindex="-1">css选择器排序 <a class="header-anchor" href="#css选择器排序" aria-label="Permalink to &quot;css选择器排序&quot;">​</a></h2><ul><li>内联样式的权重为1000。</li><li>ID选择器的权重为100。</li><li>类选择器、属性选择器和伪类选择器的权重为10。</li><li>元素选择器和伪元素选择器的权重为1。</li></ul><h2 id="属性选择器和伪类选择器" tabindex="-1">属性选择器和伪类选择器 <a class="header-anchor" href="#属性选择器和伪类选择器" aria-label="Permalink to &quot;属性选择器和伪类选择器&quot;">​</a></h2><ul><li><p>属性选择器使用方括号（[]）来指定属性和属性值。</p></li><li><p>伪类选择器选择处于特定状态或特定位置的元素。它们通过在选择器后面使用冒号（:）和关键词来指定。</p></li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 选择已选中的复选框 不用js*/</span></span>
<span class="line"><span style="color:#FFCB6B;">input</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">checkbox</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]:</span><span style="color:#C792EA;">checked</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> yellow</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>常见伪类选择器</p><ol><li>链接伪类选择器（Link Pseudo-Classes）： <ul><li>:link：选择尚未访问过的链接。</li><li>:visited：选择已访问过的链接。</li></ul></li><li>用户行为伪类选择器（User Action Pseudo-Classes）： <ul><li>:hover：选择鼠标悬停在元素上的状态。</li><li>:active：选择鼠标点击按下时的状态。</li><li>:focus：选择当前获得焦点的元素。</li></ul></li><li>内容状态伪类选择器（Content State Pseudo-Classes）： <ul><li>:first-child：选择作为父元素的第一个子元素的元素。</li><li>:last-child：选择作为父元素的最后一个子元素的元素。</li><li>:nth-child(n)：选择作为父元素的第n个子元素的元素。</li></ul></li><li>表单伪类选择器（Form Pseudo-Classes）： <ul><li>:checked：选择已选中的复选框或单选按钮。</li><li>:disabled：选择禁用的表单元素。</li></ul></li><li>目标伪类选择器（Target Pseudo-Class）： <ul><li>:target：选择URL片段标识符（URL fragment identifier）与元素的ID匹配的元素。</li></ul></li></ol><h2 id="伪元素选择器" tabindex="-1">伪元素选择器 <a class="header-anchor" href="#伪元素选择器" aria-label="Permalink to &quot;伪元素选择器&quot;">​</a></h2><p>伪元素选择器允许在元素的特定位置插入额外的内容，而无需修改HTML结构。这些内容可以用于添加装饰、修饰文本或创建特殊效果。</p><ul><li>::before：在元素内容之前插入生成的内容。</li><li>::after：在元素内容之后插入生成的内容。</li><li>::first-line：选择元素的第一行。</li><li>::first-letter：选择元素的第一个字母。</li></ul><h2 id="继承属性" tabindex="-1">继承属性 <a class="header-anchor" href="#继承属性" aria-label="Permalink to &quot;继承属性&quot;">​</a></h2><p>字体系列属性：<code>font</code></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">font</span><span style="color:#A6ACCD;">:组合字体</span></span>
<span class="line"><span style="color:#FFCB6B;">font-family</span><span style="color:#A6ACCD;">:规定元素的字体系列</span></span>
<span class="line"><span style="color:#FFCB6B;">font-weight</span><span style="color:#A6ACCD;">:设置字体的粗细</span></span>
<span class="line"><span style="color:#FFCB6B;">font-size</span><span style="color:#A6ACCD;">:设置字体的尺寸</span></span>
<span class="line"><span style="color:#FFCB6B;">font-style</span><span style="color:#A6ACCD;">:定义字体的风格</span></span>
<span class="line"><span style="color:#FFCB6B;">font-variant</span><span style="color:#A6ACCD;">:偏大或偏小的字体</span></span></code></pre></div><p>文本系列属性</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">text-indent</span><span style="color:#A6ACCD;">：文本缩进</span></span>
<span class="line"><span style="color:#FFCB6B;">text-align</span><span style="color:#A6ACCD;">：文本水平对齐</span></span>
<span class="line"><span style="color:#FFCB6B;">line-height</span><span style="color:#A6ACCD;">：行高</span></span>
<span class="line"><span style="color:#FFCB6B;">word-spacing</span><span style="color:#A6ACCD;">：增加或减少单词间的空白</span></span>
<span class="line"><span style="color:#FFCB6B;">letter-spacing</span><span style="color:#A6ACCD;">：增加或减少字符间的空白</span></span>
<span class="line"><span style="color:#FFCB6B;">text-transform</span><span style="color:#A6ACCD;">：控制文本大小写</span></span>
<span class="line"><span style="color:#A6ACCD;">direction：规定文本的书写方向</span></span>
<span class="line"><span style="color:#A6ACCD;">color：文本颜色</span></span></code></pre></div><p>元素可见性</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">visibility</span></span></code></pre></div><p>光标属性</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">cursor：箭头可以变成需要的形状</span></span></code></pre></div><h2 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h2><ul><li>媒体查询</li><li>百分比</li><li>vw/vh</li><li>rem</li></ul><h2 id="如果要做优化-css提高性能的方法有哪些" tabindex="-1">如果要做优化，CSS提高性能的方法有哪些？ <a class="header-anchor" href="#如果要做优化-css提高性能的方法有哪些" aria-label="Permalink to &quot;如果要做优化，CSS提高性能的方法有哪些？&quot;">​</a></h2><ul><li>内联首屏关键CSS，内联css使浏览器在下载完html后就能立刻渲染，而如果外部引用css代码，在解析html结构过程中遇到外部css文件，才会开始下载css代码，再渲染</li><li>异步加载CSS，</li><li>资源压缩</li><li>合理使用选择器</li><li>减少使用昂贵的属性</li><li>不要使用@import</li></ul><h2 id="媒体查询工作原理" tabindex="-1">媒体查询工作原理 <a class="header-anchor" href="#媒体查询工作原理" aria-label="Permalink to &quot;媒体查询工作原理&quot;">​</a></h2><ul><li>当浏览器加载页面时，解析 CSS 文件中的媒体查询。</li><li>根据设备的属性和特征，判断是否满足媒体查询的条件。如果满足，则将媒体查询内的样式规则应用到对应的元素或组件上。</li><li>如果设备的属性或特征发生改变（如屏幕旋转、窗口大小变化等），浏览器会重新计算媒体查询条件，然后根据新的条件重新应用相应的样式规则</li></ul>`,107),p=[e];function t(i,c,r,C,y,D){return a(),l("div",null,p)}const h=s(o,[["render",t]]);export{d as __pageData,h as default};
