import{_ as s,o as a,c as n,U as l}from"./chunks/framework.afdf1834.js";const C=JSON.parse('{"title":"this","description":"","frontmatter":{},"headers":[],"relativePath":"audition/js/this.md","filePath":"audition/js/this.md","lastUpdated":null}'),o={name:"audition/js/this.md"},p=l(`<h1 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h1><h2 id="node环境和浏览器环境" tabindex="-1">node环境和浏览器环境 <a class="header-anchor" href="#node环境和浏览器环境" aria-label="Permalink to &quot;node环境和浏览器环境&quot;">​</a></h2><ul><li><p>在 Node.js 环境下，全局的 this 指向的是一个空对象 <code>{}</code>，也就是说，如果在 Node.js 环境下，<code>直接访问 this，得到的是一个空对象</code>。在 Node.js 模块中，每个模块都有自己的作用域，所以在模块中访问 this，得到的也是一个空对象。</p></li><li><p>在浏览器环境下，全局的 this 指向的是 window 对象，也就是说，如果在浏览器环境下直接访问 this，得到的是 window 对象。在浏览器中，所有的全局变量和全局函数都会成为 window 对象的属性或方法，所以可以通过访问 window 对象来访问全局变量和全局函数。</p></li></ul><h2 id="this方法" tabindex="-1">this方法 <a class="header-anchor" href="#this方法" aria-label="Permalink to &quot;this方法&quot;">​</a></h2><p>在 JavaScript 中，this 的值一般有以下几种情况：</p><ol><li><p>全局作用域中的 this：在全局作用域中调用 this 时，它的值指向全局对象，即在浏览器中指向 window 对象，在 Node.js 中指向 global 对象。</p></li><li><p>函数中的 this：在函数中调用 this 时，它的值取决于函数的调用方式。如果函数是作为普通函数调用，this 的值是全局对象；如果函数是作为对象的方法调用，this 的值就是该对象；如果使用 call() 或 apply() 方法调用函数，this 的值就是传入的第一个参数；如果使用 new 关键字创建对象实例时调用函数，this 的值就是新创建的对象实例。</p></li><li><p>事件处理函数中的 this：在事件处理函数中调用 this 时，它的值指向触发事件的对象。</p></li><li><p>箭头函数中的 this：在箭头函数中调用 this 时，它的值指向外层作用域中的 this。这是因为箭头函数没有自己的执行上下文，它的上下文由外层作用域提供。</p></li><li><p>立即执行函数的this指向全局作用域</p></li></ol><h2 id="this指向的四种情况" tabindex="-1">this指向的四种情况？ <a class="header-anchor" href="#this指向的四种情况" aria-label="Permalink to &quot;this指向的四种情况？&quot;">​</a></h2><ol><li>new操作符创建实例</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this指向当前person实例对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ljt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="2"><li>指向window</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 浏览器window，node里global</span></span></code></pre></div><ol start="3"><li>对象调用方法</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// target</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这种就是改变了this了</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 浏览器window，node里global</span></span></code></pre></div><ol start="4"><li>call、apply、bind改变this</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">林三心</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sayName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Sunshin_Lin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 改变sayName的this指向obj2</span></span>
<span class="line"><span style="color:#A6ACCD;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sayName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(obj2) </span><span style="color:#676E95;font-style:italic;">// Sunshin_Lin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 改变sayName的this指向obj2</span></span>
<span class="line"><span style="color:#A6ACCD;">obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sayName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(obj2) </span><span style="color:#676E95;font-style:italic;">// Sunshin_Lin</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 改变sayName的this指向obj2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sayName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(obj2)</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// Sunshin_Lin</span></span></code></pre></div><h2 id="apply、call、bind三者的区别" tabindex="-1">apply、call、bind三者的区别 <a class="header-anchor" href="#apply、call、bind三者的区别" aria-label="Permalink to &quot;apply、call、bind三者的区别&quot;">​</a></h2><ul><li>三者都可以改变函数的this对象指向</li><li>三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则<code>默认指向全局window</code></li><li>三者都可以传参，但是<code>apply是数组</code>，而<code>call是参数列表</code>，且apply和call是一次性传入参数，而<code>bind可以分为多次传入</code></li><li><code>bind是返回绑定this之后的函数</code>，apply、call 则是立即执行</li></ul>`,17),t=[p];function e(c,i,r,y,D,F){return a(),n("div",null,t)}const h=s(o,[["render",e]]);export{C as __pageData,h as default};
