import{_ as l,o as a,c as s,U as o}from"./chunks/framework.afdf1834.js";const y=JSON.parse('{"title":"html八股文","description":"","frontmatter":{},"headers":[],"relativePath":"audition/html/html.md","filePath":"audition/html/html.md","lastUpdated":null}'),e={name:"audition/html/html.md"},t=o(`<h1 id="html八股文" tabindex="-1">html八股文 <a class="header-anchor" href="#html八股文" aria-label="Permalink to &quot;html八股文&quot;">​</a></h1><h2 id="_1-什么是-doctype-有何作用" tabindex="-1">1. 什么是 DOCTYPE， 有何作用？ <a class="header-anchor" href="#_1-什么是-doctype-有何作用" aria-label="Permalink to &quot;1. 什么是 DOCTYPE， 有何作用？&quot;">​</a></h2><p>Doctype是HTML5的文档声明，通过它可以告诉浏览器，使用哪一个HTML版本标准解析文档。在浏览器发展的过程中，HTML出现过很多版本，不同的版本之间格式书写上略有差异。如果没有事先告诉浏览器，那么浏览器就不知道文档解析标准是什么？此时，大部分浏览器将开启最大兼容模式来解析网页，我们一般称为怪异模式，这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的bug，所以文档声明是必须的。</p><h2 id="_2-title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" tabindex="-1">2. title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？ <a class="header-anchor" href="#_2-title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" aria-label="Permalink to &quot;2. title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？&quot;">​</a></h2><ul><li>title 属性表示网页的标题，h1 元素则表示层次明确的页面内容标题，对页面信息的抓取也有很大的影响</li><li>strong 是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：strong会重读，而b是展示强调内容</li><li>i 是italic(斜体)的简写，是早期的斜体元素，表示内容展示为斜体，而 em 是emphasize（强调）的简写，表示强调的文本</li></ul><h2 id="_3-行内元素和块级元素分别有哪些-有何区别-怎样转换" tabindex="-1">3. 行内元素和块级元素分别有哪些？有何区别？怎样转换？ <a class="header-anchor" href="#_3-行内元素和块级元素分别有哪些-有何区别-怎样转换" aria-label="Permalink to &quot;3. 行内元素和块级元素分别有哪些？有何区别？怎样转换？&quot;">​</a></h2><p>常见的块级元素：p、div、form、ul、li、ol、table、h1、h2、h3、h4、h5、h6、dl、dt、dd 常见的行级元素：span、a、img、button、input、select</p><p>块级元素：</p><ul><li>总是在新行上开始，就是每个块级元素独占一行，默认从上到下排列</li><li>宽度缺少时是它的容器的100%，除非设置一个宽度</li><li>高度、行高以及外边距和内边距都是可以设置的</li><li>块级元素可以容纳其它行级元素和块级元素</li></ul><p>行内元素：</p><ul><li>和其它元素都会在一行显示</li><li>高、行高以及外边距和内边距可以设置</li><li>宽度就是文字或者图片的宽度，不能改变</li><li>行级元素只能容纳文本或者其它行内元素</li></ul><p>使用行内元素需要注意的是：</p><ul><li>行内元素设置宽度width无效</li><li>行内元素设置height无效，但是可以通过line-height来设置</li><li>设置margin只有左右有效，上下无效</li><li>设置padding只有左右有效，上下无效</li></ul><p>可以通过display属性对行内元素和块级元素进行切换(主要看第 2、3、4三个值)：</p><h2 id="_4-label的作用是什么-是怎么用的" tabindex="-1">4. label的作用是什么？是怎么用的？ <a class="header-anchor" href="#_4-label的作用是什么-是怎么用的" aria-label="Permalink to &quot;4. label的作用是什么？是怎么用的？&quot;">​</a></h2><p>label元素不会向用户呈现任何特殊效果，但是，它为鼠标用户改进了可用性，当我们在label元素内点击文本时就会触发此控件。也就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。最常用label的地方就是表单中的性别单选框了，当点击文字时也能够自动聚焦绑定的表单控件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">male</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">男</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">radio</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">male</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">female</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">女</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">radio</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">female</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_5-a元素除了用于导航外-还有什么作用" tabindex="-1">5. a元素除了用于导航外，还有什么作用？ <a class="header-anchor" href="#_5-a元素除了用于导航外-还有什么作用" aria-label="Permalink to &quot;5. a元素除了用于导航外，还有什么作用？&quot;">​</a></h2><p>href属性中的url可以是浏览器支持的任何协议，所以a标签可以用来手机拨号<code>&lt;a href=&quot;tel:110&quot;&gt;110&lt;/a&gt;</code>，也可以用来发送短信<code>&lt;a href=&quot;sms:110&quot;&gt;110&lt;/a&gt;</code>，还有邮件等等 当然，a元素最常见的就是用来做锚点和 下载文件。 锚点可以在点击时快速定位到一个页面的某个位置，而下载的原理在于a标签所对应的资源浏览器无法解析，于是浏览器会选择将其下载下来。</p><h2 id="_6-你知道seo中的tdk吗" tabindex="-1">6. 你知道SEO中的TDK吗？ <a class="header-anchor" href="#_6-你知道seo中的tdk吗" aria-label="Permalink to &quot;6. 你知道SEO中的TDK吗？&quot;">​</a></h2><p>在SEO中，TDK其实就是title、description、keywords这三个标签，title表示标题标签，description是描述标签，keywords是关键词标签</p><h2 id="_7-怎么处理html5新标签兼容问题" tabindex="-1">7. 怎么处理HTML5新标签兼容问题？ <a class="header-anchor" href="#_7-怎么处理html5新标签兼容问题" aria-label="Permalink to &quot;7. 怎么处理HTML5新标签兼容问题？&quot;">​</a></h2><p>主要有两种方式：</p><ul><li>实现标签被识别：通过document.createElement(tagName)方法可以让浏览器识别新的标签，浏览器支持新标签后。还可以为新标签添加CSS样式</li><li>用JavaScript解决：使用HTML5的shim框架，在head标签中调用以下代码：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">[if lt IE </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#A6ACCD;">[endif]</span><span style="color:#89DDFF;">--&gt;</span></span></code></pre></div><h2 id="_8-html5新增了哪些新特性-移除了哪些元素" tabindex="-1">8. HTML5新增了哪些新特性？移除了哪些元素？ <a class="header-anchor" href="#_8-html5新增了哪些新特性-移除了哪些元素" aria-label="Permalink to &quot;8. HTML5新增了哪些新特性？移除了哪些元素？&quot;">​</a></h2><p>HTML5主要是关于图像、位置、存储、多任务等功能的增加：</p><ul><li>语义化标签，如：article、footer、header、nav等</li><li>视频video、音频audio</li><li>画布canvas</li><li>表单控件，calemdar、date、time、email</li><li>地理</li><li>本地离线存储，localStorage长期存储数据，浏览器关闭后数据不丢失，sessionStorage的数据在浏览器关闭后自动删除</li><li>拖拽释放</li></ul><p>移除的元素：</p><ul><li>纯表现的元素：basefont、font、s、strike、tt、u、big、center</li><li>对可选用性产生负面影响的元素：frame、frameset、noframes</li></ul><h2 id="_9-网页的渲染" tabindex="-1">9. 网页的渲染 <a class="header-anchor" href="#_9-网页的渲染" aria-label="Permalink to &quot;9. 网页的渲染&quot;">​</a></h2><ol><li>加载js然后html和css，设置defer和acync时js和html异步加载</li><li>html转换为dom，css转换为cssom</li><li>将DOM和CSSOM合并成一棵渲染render树</li><li>对渲染树进行reflow(回流，重排)，计算元素位置</li><li>绘制网页repaint(重绘)</li><li>根据浏览器提供各层的信息合成图层，显示到屏幕上</li></ol><h2 id="_10-渲染树" tabindex="-1">10. 渲染树 <a class="header-anchor" href="#_10-渲染树" aria-label="Permalink to &quot;10. 渲染树&quot;">​</a></h2><ol><li>从根元素开始检查哪些元素可见，以及样式</li><li>忽略不可见的元素 <ol><li><code>display:none</code>不占位置会忽略</li><li><code>visiabllity:hidden</code>,<code>position</code>定位,<code>obsity:0</code>这三个占位置，不会忽略</li></ol></li></ol><h2 id="_11-重排-回流-重绘" tabindex="-1">11. 重排(回流)，重绘 <a class="header-anchor" href="#_11-重排-回流-重绘" aria-label="Permalink to &quot;11. 重排(回流)，重绘&quot;">​</a></h2><ol><li>计算渲染树中的元素<code>大小和位置</code></li><li>当页面中的元素的<code>大小或位置发生变化</code>，便会触发重排，</li><li>每次修改样式都会触发重排，重排非常耗费资源，开发尽量减少次数</li></ol><h3 id="重绘" tabindex="-1">重绘 <a class="header-anchor" href="#重绘" aria-label="Permalink to &quot;重绘&quot;">​</a></h3><p>当页面发生变化时浏览器会对页面重新绘制，不可避免</p><p><strong>重排一定重绘，重绘不一定重排</strong></p><h3 id="避免重排重绘" tabindex="-1">避免重排重绘 <a class="header-anchor" href="#避免重排重绘" aria-label="Permalink to &quot;避免重排重绘&quot;">​</a></h3><ol><li>避免频繁使用 style，而是采用修改class的方式。</li><li>使⽤DocumentFragment</li><li>提升为合成层 <ol><li>合成层的位图，会交由 GPU 合成，⽐ CPU 处理要快</li><li>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li><li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li></ol></li><li>提升合成层的最好⽅式是使⽤ CSS 的 will-change 属性：</li></ol><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#</span><span style="color:#F78C6C;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#B2CCD6;">will-change</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> transform</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_12-合成层" tabindex="-1">12. 合成层 <a class="header-anchor" href="#_12-合成层" aria-label="Permalink to &quot;12. 合成层&quot;">​</a></h2><ol><li>合成就是将页面的各个部分分成多个层，最后把它们合成为一个页面的技术</li><li>合成层拥有单独的图层，不影响其他图层，而其他不是合成层的渲染层，则和其第一个拥有图层(GraphicsLayer)的父层共用一个。</li><li>它使用 GPU 来计算</li><li>只要该层的内容不发生改变，就没必要进行重绘（repaint）</li><li>元素提升为合成层后，transform 和 opacity 才不会触发 repaint，如果不是合成层，则其依然会触发 repaint。</li></ol><h3 id="触发合成层" tabindex="-1">触发合成层 <a class="header-anchor" href="#触发合成层" aria-label="Permalink to &quot;触发合成层&quot;">​</a></h3><ol><li>使用CSS3硬件加速：将元素的属性设置为transform、opacity、filter、will-change等，浏览器会自动将这些元素创建为单独的合成层；设置 transform: translateZ(0)，如果使用 translateX 或 translateY，元素将会被绘制在普通文档流中 demo。</li><li>使用固定定位或绝对定位：将元素设置为position:fixed或position:absolute，可以使元素创建为单独的合成层；</li><li>使用IFrame元素：将一些常用的元素或动画效果放置在IFrame中，可以减少对页面的影响；</li><li>使用video、canvas等元素：这些元素通常都是单独的合成层，可以减少对其他元素的影响。</li><li>隐式合成：一个或多个非合成元素应出现在堆叠顺序上的合成元素之上，会被提升为合成层。</li></ol><h3 id="层压缩" tabindex="-1">层压缩 <a class="header-anchor" href="#层压缩" aria-label="Permalink to &quot;层压缩&quot;">​</a></h3><ol><li>层隐式合成的例子，可能简单的重叠就会产生大量的合成层，这样会占用很多无辜的 CPU 和 内存资源，严重影响了页面的性能。这一点浏览器也考虑到了，因此就有了层压缩（Layer Squashing）的处理</li><li>浏览器的自动层压缩并不是万能的，有很多特定情况下，浏览器是无法进行层压缩的。比如 video 元素的渲染等。</li></ol><h3 id="层爆炸" tabindex="-1">层爆炸 <a class="header-anchor" href="#层爆炸" aria-label="Permalink to &quot;层爆炸&quot;">​</a></h3><ol><li>同合成层重叠也会使元素提升为合成层，虽然有浏览器的层压缩机制，但是也有很多无法进行压缩的情况。也就是说除了我们显式的声明的合成层，还可能由于重叠原因不经意间产生一些不在预期的合成层，极端一点可能会产生大量的额外合成层，出现层爆炸的现象</li><li>解决层爆炸的问题，最佳方案是打破 overlap 的条件，也就是说让其他元素不要和合成层元素重叠，譬如巧妙的使用 z-index 属性。</li></ol><h2 id="_13-谈谈html语义化" tabindex="-1">13. 谈谈html语义化 <a class="header-anchor" href="#_13-谈谈html语义化" aria-label="Permalink to &quot;13. 谈谈html语义化&quot;">​</a></h2><p>语义元素可以清楚地向浏览器和开发者描述其意义。即元素本身传达了关于标签所包含内容类型的一些信息。例如，当浏览器解析到标签时，它将该标签解释为包含这一块内容的最重要的标题。</p><ol><li>非语义元素：<code>&lt;div&gt;</code>和<code>&lt;span&gt; </code>无法提供关于其内容的信息。</li><li>语义元素：<code>&lt;form&gt;</code>、<code>&lt;table&gt;</code> 以及 <code>&lt;img&gt;</code> 清晰地定义其内容。</li></ol><h3 id="为什么要语义化" tabindex="-1">为什么要语义化？ <a class="header-anchor" href="#为什么要语义化" aria-label="Permalink to &quot;为什么要语义化？&quot;">​</a></h3><ol><li>页面结构: 使页面没有css的情况下，也能够<strong>呈现出很好的内容结构</strong></li><li><strong>有利于SEO</strong>: 爬虫依赖标签来确定关键字的权重，因此可以帮助爬虫抓取更多的有效信息</li><li><strong>提升用户体验</strong>： 例如title、alt可以用于解释名称或者解释图片信息，以及label标签的灵活运用。</li><li><strong>便于团队开发和维护</strong>: 语义化使得代码更具有可读性，让其他开发人员更加理解你的html结构，减少差异化。</li><li>方便其他设备解析: 如屏幕阅读器、盲人阅读器、移动设备等，以有意义的方式来渲染网页。</li></ol><h2 id="iframe" tabindex="-1">IFrame <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;IFrame&quot;">​</a></h2><p>IFrame（Inline Frame）是HTML中的一个元素，<code>可以在页面中嵌入另一个HTML文档或者网页</code>。IFrame元素可以用来在当前页面中显示来自其他网站或者服务器的内容，也可以用来实现一些特殊的功能，如打印预览、广告展示等。</p><p>IFrame元素的基本用法是通过src属性指定要嵌入的HTML文档或网页的URL，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">iframe</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://www.example.com</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">iframe</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>IFrame元素的主要特点包括：</p><ul><li><strong>独立的文档流</strong>：IFrame元素中嵌入的文档与主文档是独立的，可以有自己的CSS样式、JavaScript脚本等；</li><li>安全性：IFrame元素中嵌入的文档来自其他域名或者服务器，需要遵循同源策略，从而保证网页的安全性；</li><li>高度和宽度的控制：可以通过设置height和width属性来控制IFrame元素的大小；</li><li>网页性能的影响：IFrame元素会加载嵌入的文档，从而对网页的性能和加载速度产生一定的影响，需要注意优化。</li></ul>`,61),n=[t];function i(p,r,c,h,d,D){return a(),s("div",null,n)}const m=l(e,[["render",i]]);export{y as __pageData,m as default};
