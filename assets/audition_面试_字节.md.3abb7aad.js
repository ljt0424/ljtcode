import{_ as s,o as a,c as n,U as l}from"./chunks/framework.afdf1834.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"audition/面试/字节.md","filePath":"audition/面试/字节.md","lastUpdated":null}'),o={name:"audition/面试/字节.md"},p=l(`<h2 id="数组存储怎么压缩" tabindex="-1">数组存储怎么压缩 <a class="header-anchor" href="#数组存储怎么压缩" aria-label="Permalink to &quot;数组存储怎么压缩&quot;">​</a></h2><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><ul><li>js基本，number,String,boolen,null,undefined,bigint,symbol</li><li>引用，object，array，function</li><li>typeof判断基本null返回object，引用类型会把array判断成object</li><li>Object.prototype.toString.call</li></ul><h2 id="let-const-栈-堆-栈堆那个访问快" tabindex="-1">let，const，栈，堆，栈堆那个访问快 <a class="header-anchor" href="#let-const-栈-堆-栈堆那个访问快" aria-label="Permalink to &quot;let，const，栈，堆，栈堆那个访问快&quot;">​</a></h2><ul><li>let const都是有块作用域的</li><li>let 声明的是变量，const声明的是常量，引用类型地址和基本类型存放在栈里，当函数执行完毕后，栈会自动释放这些内存，因此栈的管理非常高效。引用类型的值放在堆里</li><li>访问栈比访问堆要快得多，</li><li>栈是一种<code>线性数据结构</code>,<code>栈后进先出&quot;的顺序存储</code>，而且栈<code>内存是连续分配的</code></li><li>堆是一种<code>非线性数据结构</code>,堆中数据的存储位置并<code>不是连续的</code>，而是分散的,通过<code>指针或引用</code>来找到对象的实际位置</li></ul><h2 id="settimeout和settineinterval哪个更准确-设为0怎样" tabindex="-1">settimeout和settineinterval哪个更准确，设为0怎样 <a class="header-anchor" href="#settimeout和settineinterval哪个更准确-设为0怎样" aria-label="Permalink to &quot;settimeout和settineinterval哪个更准确，设为0怎样&quot;">​</a></h2><p>setTimeout函数会尽可能快地将任务放入任务队列中,4ms延时</p><h2 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h2><p>js是单线程的，为了避免耗时任务阻塞队列，有了同步任务和异步任务，同步任务执行完会在异步任务队列里拿任务，异步任务右分为，宏任务微任务，他们都有各自的队列，执行宏任务期间产生的微任务会放入微任务队列，宏任务执行完毕后执行为任务，然后再继续执行下一个宏任务，如此循环就是事件循环</p><h2 id="tcp-udp" tabindex="-1">tcp，udp <a class="header-anchor" href="#tcp-udp" aria-label="Permalink to &quot;tcp，udp&quot;">​</a></h2><p>tcp：面向链接，可靠，字节流，保证数据顺序和完整性 udp：无连接，不可靠，数据报，不保证数据顺序和完整性</p><h2 id="http如何建立连接" tabindex="-1">http如何建立连接 <a class="header-anchor" href="#http如何建立连接" aria-label="Permalink to &quot;http如何建立连接&quot;">​</a></h2><p>三次握手</p><h2 id="https如何防窃听和篡改-抓过包没-可以修改吗" tabindex="-1">https如何防窃听和篡改，抓过包没，可以修改吗 <a class="header-anchor" href="#https如何防窃听和篡改-抓过包没-可以修改吗" aria-label="Permalink to &quot;https如何防窃听和篡改，抓过包没，可以修改吗&quot;">​</a></h2><p>ssl/tsl加密，ssl有对称加密和非对称加密 抓包（Packet Capture）是指拦截和记录通过网络传输的数据包的过程。网络抓包工具可以截获在网络上发送和接收的数据</p><h2 id="promise状态-状态可以改变吗-常用的静态方法" tabindex="-1">promise状态，状态可以改变吗，常用的静态方法 <a class="header-anchor" href="#promise状态-状态可以改变吗-常用的静态方法" aria-label="Permalink to &quot;promise状态，状态可以改变吗，常用的静态方法&quot;">​</a></h2><p>pending,fuillied,rejected,fuillied到rejected状态不可变，all，some,</p><h2 id="vue怎么防止xss攻击" tabindex="-1">vue怎么防止xss攻击 <a class="header-anchor" href="#vue怎么防止xss攻击" aria-label="Permalink to &quot;vue怎么防止xss攻击&quot;">​</a></h2><p>xss攻击是恶意注入脚本，盗取存储在客户端的cookie或者有用户敏感信息，反射性（表单提交），存储型（脚本存在服务器里，脚本在服务器返回，在浏览器执行），dom型（修改web页面的dom触发攻击）</p><h2 id="vue如何渲染用户想要的自定义文本-文本编辑器" tabindex="-1">vue如何渲染用户想要的自定义文本（文本编辑器） <a class="header-anchor" href="#vue如何渲染用户想要的自定义文本-文本编辑器" aria-label="Permalink to &quot;vue如何渲染用户想要的自定义文本（文本编辑器）&quot;">​</a></h2><h2 id="手写题1-settimeout-console-log-1-1000-怎么让1在2s后打印-不能直接修改时间" tabindex="-1">手写题1：settimeout(() =&gt; {console.log(1)}，1000)怎么让1在2s后打印，不能直接修改时间 <a class="header-anchor" href="#手写题1-settimeout-console-log-1-1000-怎么让1在2s后打印-不能直接修改时间" aria-label="Permalink to &quot;手写题1：settimeout(() =&gt; {console.log(1)}，1000)怎么让1在2s后打印，不能直接修改时间&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span></code></pre></div><h2 id="手写题2-实例链式调用-如let-a-new-man-a-sleep-3000-sayhi-sleep-1000-sleep-2000-sayhi-写出man-构造函数" tabindex="-1">手写题2：实例链式调用：如let a = new Man(); a.sleep(3000).sayHi().sleep(1000).sleep(2000).sayHi()；写出Man()构造函数 <a class="header-anchor" href="#手写题2-实例链式调用-如let-a-new-man-a-sleep-3000-sayhi-sleep-1000-sleep-2000-sayhi-写出man-构造函数" aria-label="Permalink to &quot;手写题2：实例链式调用：如let a = new Man(); a.sleep(3000).sayHi().sleep(1000).sleep(2000).sayHi()；写出Man()构造函数&quot;">​</a></h2><h2 id="手写题3-遍历dom树打印每个元素的tagname" tabindex="-1">手写题3：遍历DOM树打印每个元素的tagName <a class="header-anchor" href="#手写题3-遍历dom树打印每个元素的tagname" aria-label="Permalink to &quot;手写题3：遍历DOM树打印每个元素的tagName&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">traverseDOMTree</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 打印当前元素的tagName</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tagName</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 遍历当前元素的子元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">traverseDOMTree</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取文档的根元素</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rootElement </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从根元素开始遍历DOM树</span></span>
<span class="line"><span style="color:#82AAFF;">traverseDOMTree</span><span style="color:#A6ACCD;">(rootElement)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="手写题4-打印数组全排列-1-2-3-打印-1-2-3-1-3-2-2-1-3-2-3-1-3-1-2-3-2-1" tabindex="-1">手写题4：打印数组全排列，<code>[1,2,3]</code> 打印<code>[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</code> <a class="header-anchor" href="#手写题4-打印数组全排列-1-2-3-打印-1-2-3-1-3-2-2-1-3-2-3-1-3-1-2-3-2-1" aria-label="Permalink to &quot;手写题4：打印数组全排列，\`[1,2,3]\` 打印\`[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\`&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">permuteArray</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">backtrack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">current</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">remaining</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">remaining</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remaining</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remaining</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newRemaining</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remaining</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">remaining</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">backtrack</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newRemaining</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">backtrack</span><span style="color:#F07178;">([]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> permute </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dfs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 个数选够了</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 拷贝一份path，加入解集res</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">                 </span><span style="color:#676E95;font-style:italic;">// 结束当前递归分支</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// for枚举出每个可选的选项</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">continue</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">num</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">([])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//去重</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> permuteUnique </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">nums</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">nums</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span><span style="color:#676E95;font-style:italic;">//排序</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dfs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">len</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">len</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">||</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">               </span><span style="color:#89DDFF;font-style:italic;">continue</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nums</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">used</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">dfs</span><span style="color:#F07178;">([])</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="项目难点、解决方案" tabindex="-1">项目难点、解决方案 <a class="header-anchor" href="#项目难点、解决方案" aria-label="Permalink to &quot;项目难点、解决方案&quot;">​</a></h2><h2 id="canvas、svg的区别" tabindex="-1">canvas、svg的区别 <a class="header-anchor" href="#canvas、svg的区别" aria-label="Permalink to &quot;canvas、svg的区别&quot;">​</a></h2><p>Canvas是基于位图的绘图技术，图形缩放可能会导致图像模糊，它通过js来操作像素，并在画布上绘制图像、图形和动画。 SVG是一种基于矢量图形的绘图技术，使用XML格式描述图形。图形是矢量形式，可以无损地缩放。通过CSS和JavaScript进行样式和交互控制。</p><h2 id="canvas绘制的图像怎么用图片形式直接展示-todataurl转base64" tabindex="-1">canvas绘制的图像怎么用图片形式直接展示(toDataUrl转base64) <a class="header-anchor" href="#canvas绘制的图像怎么用图片形式直接展示-todataurl转base64" aria-label="Permalink to &quot;canvas绘制的图像怎么用图片形式直接展示(toDataUrl转base64)&quot;">​</a></h2><p>toDataUrl转base64</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dataURL </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toDataURL</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 获取Canvas内容的Base64图片数据</span></span></code></pre></div><h2 id="图片类型和格式分别有哪些-对应的使用场景" tabindex="-1">图片类型和格式分别有哪些，对应的使用场景 <a class="header-anchor" href="#图片类型和格式分别有哪些-对应的使用场景" aria-label="Permalink to &quot;图片类型和格式分别有哪些，对应的使用场景&quot;">​</a></h2><h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2><ol><li>强缓存： 强缓存是通过设置HTTP响应头来实现的，让浏览器在一定时间内直接使用本地缓存而不发送请求到服务器。,<code>Expires</code>：指定一个绝对过期时间,<code>Cache-Control</code>：指定一个相对过期时间或最大缓存时间，如<code>max-age=3600</code></li><li>协商缓存： 协商缓存是通过设置HTTP响应头来实现的，浏览器在使用缓存前会向服务器发送请求，如果服务器确认资源没有发生变化，会返回一个<code>304 Not Modified</code>状态码，并且不返回资源内容，浏览器会直接使用本地缓存。 <code>ETag和If-None-Match</code>：<code>ETag是服务器为资源生成的唯一标识符</code>，浏览器在后续请求中通过<code>If-None-Match头将该标识符发送给服务器</code>，如果资源的ETag没有变化，则服务器返回304状态码。</li></ol><h2 id="虚拟内存" tabindex="-1">虚拟内存 <a class="header-anchor" href="#虚拟内存" aria-label="Permalink to &quot;虚拟内存&quot;">​</a></h2><p>虚拟内存通过<code>将部分进程的数据和代码存储在磁盘上</code>，使得每个进程都认为它拥有连续的私有内存空间，而<code>不受实际物理内存大小的限制</code>。这样，多个进程可以在有限的物理内存上运行，从而提高系统的整体性能和资源利用率。</p><h2 id="cdn" tabindex="-1">CDN <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;CDN&quot;">​</a></h2><p>CDN就是根据用户位置分配最近的资源,用户在上网的时候不用直接访问源站，访问离他“最近的”一个 CDN 节点，术语叫边缘节点，其实就是缓存了源站内容的代理服务器 应用CDN后，DNS 返回的不再是 IP 地址，而是一个CNAME(Canonical Name ) 别名记录，指向CDN的全局负载均衡系统，</p><ul><li>负载均衡系统：CDN的全局负载均衡系统找到一个合适的边缘节点，返回给用户，就近访问CDN的缓存代理</li><li>缓存代理：缓存系统会有选择地缓存那些最常用的那些资源， <ul><li>命中率：用户访问的资源恰好在缓存系统里，可以直接返回给用户，命中次数与所有访问次数之比</li><li>回源率：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比，可以分为一级缓存和二级缓存</li></ul></li></ul><h2 id="sessionstorage、localstorage" tabindex="-1">sessionstorage、localstorage <a class="header-anchor" href="#sessionstorage、localstorage" aria-label="Permalink to &quot;sessionstorage、localstorage&quot;">​</a></h2><p>浏览器存储，不和服务端进行交互</p><ul><li>sessionstorage，存储临时数据，页面关闭就数据消失</li><li>localstorage，存储长期使用的数据，页面关闭还会存在，存储的信息在同一域中是共享的 <ul><li>无法像Cookie一样设置过期时间</li><li>只能存入字符串，无法直接存对象</li></ul></li></ul><h2 id="进程、线程、chrome内核分别有哪些进程、线程-chrome内核把浏览器多标签设计的进程还是线程-为什么这么设计" tabindex="-1">进程、线程、chrome内核分别有哪些进程、线程，chrome内核把浏览器多标签设计的进程还是线程，为什么这么设计？ <a class="header-anchor" href="#进程、线程、chrome内核分别有哪些进程、线程-chrome内核把浏览器多标签设计的进程还是线程-为什么这么设计" aria-label="Permalink to &quot;进程、线程、chrome内核分别有哪些进程、线程，chrome内核把浏览器多标签设计的进程还是线程，为什么这么设计？&quot;">​</a></h2><p>进程是运行的程序，一个进程可以有多个线程，分别执行不同的任务，</p><ul><li>主进程，渲染进程，GPU进程，网络进程，插件进程，扩展进程，每个进程有多个线程</li></ul><p>Chrome浏览器将多标签设计为多进程，每个标签页运行在独立的渲染进程中</p><ul><li>提高安全性</li><li>提高性能，多个标签页可以并行处理，从而提高了页面加载和响应速度。</li><li>提高稳定性，一个标签页的崩溃不会影响到其他标签页</li><li>资源隔离，避免了不同网页之间的资源争夺和冲突</li></ul><h2 id="事件循环输出题" tabindex="-1">事件循环输出题 <a class="header-anchor" href="#事件循环输出题" aria-label="Permalink to &quot;事件循环输出题&quot;">​</a></h2><h2 id="一面13题追问-怎么实现settimeout的准时执行-裁剪时间戳-料到字节有补充追问的习惯" tabindex="-1">一面13题追问，怎么实现setTimeout的准时执行(裁剪时间戳，料到字节有补充追问的习惯) <a class="header-anchor" href="#一面13题追问-怎么实现settimeout的准时执行-裁剪时间戳-料到字节有补充追问的习惯" aria-label="Permalink to &quot;一面13题追问，怎么实现setTimeout的准时执行(裁剪时间戳，料到字节有补充追问的习惯)&quot;">​</a></h2><p>采用系统时间补偿法：修正每次时间间隔，前面耽误了时间，那么就缩小当前定时器的间隔时间。</p><h2 id="vue-keep-alive的作用和实现原理" tabindex="-1">vue keep-alive的作用和实现原理 <a class="header-anchor" href="#vue-keep-alive的作用和实现原理" aria-label="Permalink to &quot;vue keep-alive的作用和实现原理&quot;">​</a></h2><p>keepalive缓存组件，</p><ul><li>判断是否缓存：如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode</li><li>需要缓存：是否缓存过，没有则加到存储缓存组件的对象this.cache中 <ul><li>首先获取组件的key值：拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存，直接从缓存中拿 vnode 的组件实例</li><li>this.cache对象中没有该key值的情况，以该组件的key为键，组件vnode为值，将其存入this.cache中，并且把key存入this.keys中，</li></ul></li></ul><h2 id="场景题-后端返回的64位大数-前端怎么处理精度丢失的问题" tabindex="-1">场景题：后端返回的64位大数，前端怎么处理精度丢失的问题 <a class="header-anchor" href="#场景题-后端返回的64位大数-前端怎么处理精度丢失的问题" aria-label="Permalink to &quot;场景题：后端返回的64位大数，前端怎么处理精度丢失的问题&quot;">​</a></h2><p>bigint，第三方库，拆分合并</p><h2 id="手写题1-画0-5px的线" tabindex="-1">手写题1：画0.5px的线 <a class="header-anchor" href="#手写题1-画0-5px的线" aria-label="Permalink to &quot;手写题1：画0.5px的线&quot;">​</a></h2><p>transform: scaleY(0.5);</p><h2 id="手写题2-发布订阅模式实现event-bus" tabindex="-1">手写题2：发布订阅模式实现event-bus <a class="header-anchor" href="#手写题2-发布订阅模式实现event-bus" aria-label="Permalink to &quot;手写题2：发布订阅模式实现event-bus&quot;">​</a></h2><h2 id="手写题3-数组拍平-flat-3-代表拍平三层" tabindex="-1">手写题3：数组拍平，flat(3)代表拍平三层 <a class="header-anchor" href="#手写题3-数组拍平-flat-3-代表拍平三层" aria-label="Permalink to &quot;手写题3：数组拍平，flat(3)代表拍平三层&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">flat</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="项目难点、解决方案-1" tabindex="-1">项目难点、解决方案 <a class="header-anchor" href="#项目难点、解决方案-1" aria-label="Permalink to &quot;项目难点、解决方案&quot;">​</a></h2><h2 id="实习有关" tabindex="-1">实习有关 <a class="header-anchor" href="#实习有关" aria-label="Permalink to &quot;实习有关&quot;">​</a></h2><h2 id="offer情况" tabindex="-1">offer情况 <a class="header-anchor" href="#offer情况" aria-label="Permalink to &quot;offer情况&quot;">​</a></h2><h2 id="从输入url到渲染页面的全过程" tabindex="-1">从输入URL到渲染页面的全过程 <a class="header-anchor" href="#从输入url到渲染页面的全过程" aria-label="Permalink to &quot;从输入URL到渲染页面的全过程&quot;">​</a></h2><ol><li>解析url</li><li>DNS查询IP地址</li><li>建立连接</li><li>客户端发起请求</li><li>服务端响应，返回数据</li><li>渲染页面</li></ol><h2 id="强缓存、协商缓存字段、状态码" tabindex="-1">强缓存、协商缓存字段、状态码 <a class="header-anchor" href="#强缓存、协商缓存字段、状态码" aria-label="Permalink to &quot;强缓存、协商缓存字段、状态码&quot;">​</a></h2><p>通过http，让浏览器在一定时间内直接使用本地缓存而不想服务器发送请求，设置expires设置一个绝对过期时间和Cache-Control设置一个相对时间最大缓存时间max-age =3000 浏览器向服务器发送请求，如果当前页面资源没有变化，服务器返回304，不返回内容，浏览器直接使用本地缓存，Etag，服务端为每个资源都有一个唯一的标识，if-none-match将etag标识符发送给服务器，如果没有变，则返回304不返回内容</p><h2 id="长连接、短连接" tabindex="-1">长连接、短连接 <a class="header-anchor" href="#长连接、短连接" aria-label="Permalink to &quot;长连接、短连接&quot;">​</a></h2><p>长链接：客户端和服务器之间建立一次连接后保持打开状态，直到到了超时时间或者一方主动断开连接 短连接：客户端和服务器之间建立一次连接后激励关闭链接，</p><h2 id="场景题-同一个程序在不同客户端上运行结果不同-运行环境相同-你怎么排查原因" tabindex="-1">场景题：同一个程序在不同客户端上运行结果不同(运行环境相同)，你怎么排查原因？ <a class="header-anchor" href="#场景题-同一个程序在不同客户端上运行结果不同-运行环境相同-你怎么排查原因" aria-label="Permalink to &quot;场景题：同一个程序在不同客户端上运行结果不同(运行环境相同)，你怎么排查原因？&quot;">​</a></h2><p>环境差异，日志记录，版本问题，测试用例，服务器配置，debugger</p><h2 id="手写题-连续子数组的最大和-除了暴力写三种做法-这道题讨论了40分钟-dp、双指针、分治都用了" tabindex="-1">手写题：连续子数组的最大和，除了暴力写三种做法(这道题讨论了40分钟，DP、双指针、分治都用了) <a class="header-anchor" href="#手写题-连续子数组的最大和-除了暴力写三种做法-这道题讨论了40分钟-dp、双指针、分治都用了" aria-label="Permalink to &quot;手写题：连续子数组的最大和，除了暴力写三种做法(这道题讨论了40分钟，DP、双指针、分治都用了)&quot;">​</a></h2>`,74),e=[p];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{C as __pageData,h as default};
