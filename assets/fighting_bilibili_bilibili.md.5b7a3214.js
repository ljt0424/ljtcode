import{_ as s,o as a,c as l,U as n}from"./chunks/framework.afdf1834.js";const d=JSON.parse('{"title":"bilibili错题","description":"","frontmatter":{},"headers":[],"relativePath":"fighting/bilibili/bilibili.md","filePath":"fighting/bilibili/bilibili.md","lastUpdated":null}'),o={name:"fighting/bilibili/bilibili.md"},p=n(`<h1 id="bilibili错题" tabindex="-1">bilibili错题 <a class="header-anchor" href="#bilibili错题" aria-label="Permalink to &quot;bilibili错题&quot;">​</a></h1><h2 id="定时器" tabindex="-1">定时器 <a class="header-anchor" href="#定时器" aria-label="Permalink to &quot;定时器&quot;">​</a></h2><p>宏任务的定时器谁先到时间谁先执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p><strong>3-2-1</strong></p><h2 id="哪个样式在现代浏览器默认样式下设置宽度不生效display-table-row" tabindex="-1">哪个样式在现代浏览器默认样式下设置宽度不生效<code>display:table-row</code> <a class="header-anchor" href="#哪个样式在现代浏览器默认样式下设置宽度不生效display-table-row" aria-label="Permalink to &quot;哪个样式在现代浏览器默认样式下设置宽度不生效\`display:table-row\`&quot;">​</a></h2><p><a href="https://blog.csdn.net/lin1072368472/article/details/108972997?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168247581816800192259384%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168247581816800192259384&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-108972997-null-null.142%5Ev86%5Ekoosearch_v1,239%5Ev2%5Einsert_chatgpt&amp;utm_term=display%3Atable-row&amp;spm=1018.2226.3001.4187" target="_blank" rel="noreferrer">参考</a></p><ul><li>table标签（display:table） 类似于 <code>&lt;table&gt;</code><ol><li>table可设置宽高、margin、border、padding等属性。属性值的单位可以使用px，百分比值。</li><li>table的宽度默认由内容的宽高撑开，如果table<strong>设置了宽度</strong>，宽度默认被它里面的td平均分，如果给某一个td设置宽度，那么table剩余的宽度会被其他的td平均分（有点类似flex布局）</li><li>给table设置的高度起到的作用只是min-height的作用，当内容的高度高于设置的高度时，table的高度会被撑高。</li></ol></li><li>tr标签（display:table-row）类似于<code>&lt;tr&gt;</code><ol><li>给tr设置高度只起到min-height的作用，默认会平分table的高度。</li><li>tr中的td默认高度会继承tr的高度，若给任一td设置了高度，其他td的高度也同样变高。适合多列等高布局</li><li><strong>设置宽度、margin、都不起作用</strong></li></ol></li><li>td标签（display:table-cell）类似于<code>&lt;td&gt;</code><ol><li>td默认继承tr的高度，且平分table的宽度</li><li>若table（display:table）不存在，给td设置的宽高不能用百分比只能用准确的数</li><li>给td设置vertical-align: middle; td元素里面(除float、position:absolute)所有的块级、非块级元素都会相对于td垂直居中</li><li>给td设置text-align: center; td元素里面所有非block元素(除float、position:absolute)都会相对于td水平居中，虽然block元素不居中，但其中的文字或inline元素会水平居中</li></ol></li></ul><h2 id="object-prototype-tostring-call-undefined" tabindex="-1">Object.prototype.toString.call(undefined) <a class="header-anchor" href="#object-prototype-tostring-call-undefined" aria-label="Permalink to &quot;Object.prototype.toString.call(undefined)&quot;">​</a></h2><p>[object Undefined],object小写，Undefined首字母大写</p><h2 id="obj对象里的箭头函数的this指向的是obj的上下文" tabindex="-1">obj对象里的箭头函数的this指向的是obj的上下文 <a class="header-anchor" href="#obj对象里的箭头函数的this指向的是obj的上下文" aria-label="Permalink to &quot;obj对象里的箭头函数的this指向的是obj的上下文&quot;">​</a></h2><p>别再错了指向的是obj的上下文，指不到里面的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">:()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//undefinded</span></span></code></pre></div><h2 id="input标签的输入类型" tabindex="-1">input标签的输入类型 <a class="header-anchor" href="#input标签的输入类型" aria-label="Permalink to &quot;input标签的输入类型&quot;">​</a></h2><p><a href="https://www.runoob.com/tags/att-input-type.html" target="_blank" rel="noreferrer">输入类型</a></p><p>没有<code>telphone</code>类型只有<code>tel</code>类型</p><h2 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h2><p>405：请求中的方法不允许使用 302：（临时移动）服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。而不是拒绝处理该请求</p><h2 id="影响原数组" tabindex="-1">影响原数组 <a class="header-anchor" href="#影响原数组" aria-label="Permalink to &quot;影响原数组&quot;">​</a></h2><p>splice,push,pop,shift,unshift,reverse,sort会影响原数组 其他的不会</p><h2 id="clip-path" tabindex="-1">clip-path <a class="header-anchor" href="#clip-path" aria-label="Permalink to &quot;clip-path&quot;">​</a></h2><p>clip-path 属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。可以指定一些特定形状。</p><h2 id="promise的catch" tabindex="-1">promise的catch <a class="header-anchor" href="#promise的catch" aria-label="Permalink to &quot;promise的catch&quot;">​</a></h2><p>promise的catch只会执行第一个，和then不同不会传递到最后</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rehect</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">e)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(e))</span></span></code></pre></div><p>只会执行第一个catch，第二个catch无结果</p><h2 id="对象键值" tabindex="-1">对象键值 <a class="header-anchor" href="#对象键值" aria-label="Permalink to &quot;对象键值&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">={},</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">123</span></span>
<span class="line"><span style="color:#A6ACCD;">a[b]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">a[c]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a[b]) </span><span style="color:#676E95;font-style:italic;">//c</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">={},</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">a[b]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">a[c]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a[b]) </span><span style="color:#676E95;font-style:italic;">//b</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">={},</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">456</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">a[b]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">a[c]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a[b]) </span><span style="color:#676E95;font-style:italic;">//c</span></span></code></pre></div><p>对象的键名可以是字符串和Symbol值，所以当键名为除了字符串和Symbol值以外的其他类型值时，都是需要转换为字符串的， 以<code>a[b]</code>这种形式调用对象的键名时，里面的键b一定要有引号，必须为字符串或者是Symbol，如果不是字符串则转为字符串。</p><h3 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h3><p>情况一转为字符串后相当于重复赋值，情况二Symbol是唯一的b和c不一样，情况三<code>{key:&#39;123&#39;}</code>和<code>{key:&#39;456&#39;}</code>转为字符串都是<code>[object,Object]</code>，所以和情况一一样重复赋值</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li>Object对象转换为字符串和判断数据类型都是直接调用 <code>toStirng()</code> 方法，得到的结果都是 <code>[object Object]</code>。</li><li>除了Obeject之外的其他类型，直接调用 <code>toStirng()</code> 方法，可以转换为字符串类型，判断数据类型得用 <code>Object.prototype.toString.call()</code> 方法！</li></ol><h2 id="let-var" tabindex="-1">let var <a class="header-anchor" href="#let-var" aria-label="Permalink to &quot;let var&quot;">​</a></h2><p>let块级作用域输出0-1-2</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>var<strong>没有</strong>块级作用域输出3-3-3</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="过渡效果transition" tabindex="-1">过渡效果transition <a class="header-anchor" href="#过渡效果transition" aria-label="Permalink to &quot;过渡效果transition&quot;">​</a></h2><p>若过渡起始值或过渡开始值为auto，则浏览器不会自己计算成具体数字值，而是不发生过渡效果。所以要过渡某些属性，首先需要将其重置成具体数字值</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">box</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">transition</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hight </span><span style="color:#F78C6C;">1s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>解决设置max-higeht</p><h2 id="input-type-text-change事件和inpute事件" tabindex="-1"><code>&lt;input type=&quot;text&quot; /&gt;</code>change事件和inpute事件 <a class="header-anchor" href="#input-type-text-change事件和inpute事件" aria-label="Permalink to &quot;\`&lt;input type=&quot;text&quot; /&gt;\`change事件和inpute事件&quot;">​</a></h2><p>用户键入内容改变时，触发inpute事件，且当标签失焦后触发change事件</p><h2 id="定位的top属性" tabindex="-1">定位的top属性 <a class="header-anchor" href="#定位的top属性" aria-label="Permalink to &quot;定位的top属性&quot;">​</a></h2><p>top属性规定内部元素的顶部边缘，定义了一个定位元素的上外边距与其包含块的上内边距</p><h2 id="取余" tabindex="-1">取余 <a class="header-anchor" href="#取余" aria-label="Permalink to &quot;取余&quot;">​</a></h2><p><code>1 % 6 = 1</code>,<code>2 % 6 = 2</code>,<code>3 % 6 = 3</code>,<code>4 % 6 = 4</code>,<code>-7 % 3 = -1</code></p><h2 id="三栏布局" tabindex="-1">三栏布局 <a class="header-anchor" href="#三栏布局" aria-label="Permalink to &quot;三栏布局&quot;">​</a></h2><p>flex方法时，<code>display:flex</code>应该设置在父元素上</p><p>使用浮动时先写left再写right再写中间的，顺序不能乱</p><h2 id="leecode-279" tabindex="-1"><a href="https://leetcode.cn/problems/perfect-squares/solutions/?languageTags=javascript" target="_blank" rel="noreferrer">leecode 279</a> <a class="header-anchor" href="#leecode-279" aria-label="Permalink to &quot;[leecode 279](https://leetcode.cn/problems/perfect-squares/solutions/?languageTags=javascript)&quot;">​</a></h2>`,52),e=[p];function t(c,r,i,y,F,D){return a(),l("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
